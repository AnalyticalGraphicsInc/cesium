<project name="Cesium" default="combine">
	<target name="build" description="A developer build that runs in-place." depends="convertShadersToJavaScript, buildSpecList" />

	<target name="combine" description="Combines all source files into a single stand-alone script." depends="build, combineJavaScript, concatenateSandboxSnippets" />

	<target name="minify" description="Combines all source files into a single stand-alone, minified script.">
		<antcall target="combine">
			<param name="build.minification" value="true" />
		</antcall>
	</target>

	<target name="release" description="A full release build that creates a shippable product, including documentation.">
		<antcall target="combine">
			<param name="build.minification" value="true" />
		</antcall>
		<antcall target="generateDocumentation" />
	</target>

	<target name="instrumentForCoverage" description="A debug build instrumented for JSCoverage (currently Windows only)." depends="build">
		<exec executable="${jscoveragePath}">
			<arg line="${sourceDirectory} ${instrumentedDirectory}" />
		</exec>
	</target>

	<target name="clean" description="Cleans the build.">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${buildDirectory}" defaultexcludes="false" />
			<fileset dir="${instrumentedDirectory}" defaultexcludes="false" />
			<fileset dir="${shadersDirectory}" includes="*.js" />
			<fileset dir="${specsDirectory}" includes="SpecList.js" />
		</delete>
	</target>

	<!-- properties controlling which steps get run -->
	<property name="build.minification" value="false" />

	<!-- Inputs -->
	<property name="sourceDirectory" location="Source" />
	<property name="shadersDirectory" location="${sourceDirectory}/Shaders" />
	<property name="examplesDirectory" location="Examples" />
	<property name="specsDirectory" location="Specs" />
	<property name="imagesDirectory" location="Images" />
	<property name="toolsDirectory" location="Tools" />
	<property name="thirdPartyDirectory" location="ThirdParty" />
	<property name="rjsPath" location="${thirdPartyDirectory}/requirejs-1.0.8/r.js" />
	<property name="almondPath" location="${thirdPartyDirectory}/almond-0.0.3/almond.js" />
	<property name="jscoveragePath" location="${toolsDirectory}/jscoverage-0.5.1/jscoverage.exe" />
	<property name="documentationImagesDirectory" location="Documentation/Images" />
	<property name="jsdoc3Directory" location="${toolsDirectory}/jsdoc3" />
	<property name="webProxyDirectory" location="${toolsDirectory}/proxy" />

	<!-- Outputs -->
	<property name="buildDirectory" location="Build" />
	<property name="instrumentedDirectory" location="Instrumented" />
	<property name="buildOutputDirectory" location="${buildDirectory}/Cesium" />
	<property name="buildDocumentationDirectory" location="${buildDirectory}/Documentation" />
	<property name="buildDocumentationImagesDirectory" location="${buildDocumentationDirectory}/images" />
	<property name="builtCesiumFile" location="${buildDirectory}/Cesium.js" />

	<!-- ********************************************************************** -->

	<scriptdef name="glslToJavascript" language="javascript">
		<!-- Scott Hunter is my hero. - Cozzi -->
		<attribute name="destination" />
		<attribute name="stripcomments" />
		<attribute name="overwrite" />
		<element name="fileset" type="fileset" />
		<![CDATA[
importClass(java.io.File);
importClass(java.io.FileReader);
importClass(java.io.FileWriter);
importClass(java.io.StringReader);
importClass(Packages.org.apache.tools.ant.util.FileUtils);
importClass(Packages.org.apache.tools.ant.filters.StripJavaComments);

var stripComments = attributes.get("stripcomments");
var overwrite = attributes.get("overwrite");
var destination = attributes.get("destination");
var filesets = elements.get("fileset");
for (var i = 0; i < filesets.size(); i++) {
  var fileset = filesets.get(i);
  var basedir  = fileset.getDir(project);
  var filenames = fileset.getDirectoryScanner(project).getIncludedFiles();

  for (var j = 0; j < filenames.length; j++) {
    var filename = filenames[j];

    var file = new File(basedir, filename);
    var targetFile = new File(destination, file.getName().replace('.glsl', '.js'));
    if (!overwrite && file.lastModified() < targetFile.lastModified()) {
      continue;
    }

    var reader = new FileReader(file);
    var contents = new String(FileUtils.readFully(reader));
    reader.close();

    contents = contents.replace(/\r\n/gm, '\n');

    var copyrightComments = contents.match(/\/\*\!(?:.|\n)*?\*\//gm) || [];

    if (stripComments) {
      contents = new String(FileUtils.readFully(new StripJavaComments(new StringReader(contents))));
      contents = contents.replace(/\s+$/gm, '').replace(/^\s+/gm, '').replace(/\n+/gm, '\n');
      contents += '\n';
    }

    contents = contents.split('"').join('\\"').replace(/\n/gm, '\\n" +\n"');
    contents = copyrightComments.join('\n') + '\n' +
               '/*global define*/\n' +
               'define(function() {\n' +
               '  "use strict";\n' +
               '  return "' + contents + '";\n' +
               '});'

    var writer = new FileWriter(targetFile);
    writer.write(contents);
    writer.close();
  }
}
    	]]>
	</scriptdef>

	<scriptdef name="createMainJs" language="javascript">
		<attribute name="output" />
		<element name="fileset" type="fileset" />
		<![CDATA[
importClass(java.io.File);
importClass(java.io.FileWriter);

var output = attributes.get("output");
var filesets = elements.get("fileset");
var moduleIDs = [], parameters = [], assignments = [];
for (var i = 0; i < filesets.size(); i++) {
  var fileset = filesets.get(i);
  var basedir  = fileset.getDir(project);
  var filenames = fileset.getDirectoryScanner(project).getIncludedFiles();

  for (var j = 0; j < filenames.length; j++) {
    var relativePath = filenames[j];
    var file = new File(basedir, relativePath);
    var baseName = file.getName();
    baseName = baseName.substring(0, baseName.lastIndexOf('.'));

    var moduleID = relativePath.replace('\\', '/');
    moduleID = moduleID.substring(0, moduleID.lastIndexOf('.'));

    var assignmentName = baseName;
    if (/Shaders\//.test(moduleID)) {
      assignmentName = '_shaders.' + assignmentName;
    }
		
    var parameterName = moduleID.replace('/', '_');

    moduleIDs.push('"' + moduleID + '"');
    parameters.push(parameterName);
    assignments.push('Cesium.' + assignmentName + ' = ' + parameterName + ';');
  }
}

var contents = 'var Cesium = window.Cesium = {_shaders:{}};\n' +
               'require([' + moduleIDs.join(', ') + '], function (' + parameters.join(', ') + ') {\n' + 
               assignments.join('\n') + '\n' +
               '}, undefined, true);';

var writer = new FileWriter(output);
writer.write(contents);
writer.close();
    	]]>
	</scriptdef>

	<!-- ********************************************************************** -->

	<target name="convertShadersToJavaScript">
		<glslToJavascript destination="${shadersDirectory}" stripcomments="${build.minification}">
			<fileset dir="${shadersDirectory}" includes="*.glsl" />
		</glslToJavascript>
	</target>

	<target name="buildSpecList">
		<pathconvert property="specList" pathsep="," dirsep="/">
			<fileset dir="${specsDirectory}" includes="**/*.js" excludes="*.js" />
			<globmapper from="${specsDirectory}/*.js" to="'*'" handledirsep="true" />
		</pathconvert>
		<echo file="Specs/SpecList.js" message="var specs = [${specList}];" />
	</target>

	<target name="combineJavaScript.createMain">
		<createMainJs output="${sourceDirectory}/main.js">
			<fileset dir="${sourceDirectory}" includes="**/*.js" excludes="main.js" />
		</createMainJs>
	</target>

	<target name="combineJavaScript.setNodePathValue">
		<condition property="nodePathValue" value="${toolsDirectory}/nodejs-0.6.15/windows/node.exe">
			<os family="windows" />
		</condition>

		<condition property="nodePathValue" value="${toolsDirectory}/nodejs-0.6.15/mac/node">
			<os family="mac" />
		</condition>

		<condition property="nodePathValue" value="${toolsDirectory}/nodejs-0.6.15/linux/node">
			<os family="unix" />
		</condition>
	</target>

	<target name="combineJavaScript.setNodePathLocation" if="nodePathValue">
		<property name="nodePath" location="${nodePathValue}" />
	</target>

	<target name="combineJavaScript.setNodePath" depends="combineJavaScript.setNodePathValue,combineJavaScript.setNodePathLocation">
		<condition property="nodePath" value="node">
			<not>
				<isset property="nodePath" />
			</not>
		</condition>
	</target>

	<target name="combineJavaScript.runrjs">
		<!-- create relative paths because r.js can't handle full Windows paths -->
		<property name="relativeAlmondPath" location="${almondPath}" relative="true" basedir="${sourceDirectory}" />
		<property name="relativeCesiumFilePath" location="${buildDirectory}\temp.js" relative="true" basedir="${sourceDirectory}" />

		<exec executable="${nodePath}" dir="${sourceDirectory}">
			<arg line="${rjsPath} -o optimize=${optimize} wrap=true baseUrl=. name=${relativeAlmondPath} include=main out=${relativeCesiumFilePath}" />
		</exec>

		<concat destfile="${builtCesiumFile}">
			<header trimleading="true">
			/*!
			 * Copyright 2011-2012 Cesium Contributors
			 *
			 * Licensed under the Apache License, Version 2.0 (the "License");
			 * you may not use this file except in compliance with the License.
			 * You may obtain a copy of the License at
			 *
			 * http://www.apache.org/licenses/LICENSE-2.0
			 *
			 * Unless required by applicable law or agreed to in writing, software
			 * distributed under the License is distributed on an "AS IS" BASIS,
			 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			 * See the License for the specific language governing permissions and
			 * limitations under the License.
			 *
			 * Columbus View (Pat. Pend.)
			 */
			</header>
			<fileset file="${buildDirectory}\temp.js" />
		</concat>
		<delete file="${buildDirectory}\temp.js" />
	</target>

	<target name="combineJavaScript.createUnminified" depends="combineJavaScript.setNodePath,combineJavaScript.createMain">
		<antcall target="combineJavaScript.runrjs">
			<param name="optimize" value="none" />
		</antcall>
		<copy file="${builtCesiumFile}" tofile="${buildDirectory}/CesiumUnminified.js" />
	</target>

	<target name="combineJavaScript.createMinified" if="${build.minification}" depends="combineJavaScript.createMain">
		<antcall target="combineJavaScript.runrjs">
			<param name="optimize" value="uglify" />
		</antcall>
	</target>

	<target name="combineJavaScript" depends="combineJavaScript.createUnminified,combineJavaScript.createMinified" />

	<target name="concatenateSandboxSnippets">
		<concat destfile="${examplesDirectory}/Sandbox/CodeSnippetsConcatenated.js" fixLastLine="true">
			<fileset dir="${examplesDirectory}/Sandbox/CodeSnippets" includes="**/*.js" />
		</concat>
		<copy todir="${examplesDirectory}/Sandbox/Images">
			<fileset dir="${imagesDirectory}" />
		</copy>
	</target>

	<target name="copyIndexHtml">
		<copy file="index.html" todir="${buildDirectory}" />
	</target>

	<target name="generateDocumentation">
		<!--
		These needs to be a relative path because Rhino doesn't work properly with Windows 
		absolute paths:
		https://github.com/mozilla/rhino/issues/10  
		-->
		<property name="relativeDocOutputDirectory" location="${buildDocumentationDirectory}" relative="true" basedir="${jsdoc3Directory}" />
		<property name="relativeSourceFilesPath" location="${sourceDirectory}" relative="true" basedir="${jsdoc3Directory}" />

		<java jar="${jsdoc3Directory}/lib/js.jar" dir="${jsdoc3Directory}" fork="true">
			<arg line="-modules node_modules -modules rhino_modules -modules ." />
			<arg line="jsdoc.js" />
			<arg line="-r" />
			<arg line="-d ${relativeDocOutputDirectory}" />
			<arg line="${relativeSourceFilesPath}" />
		</java>

		<copy todir="${buildDocumentationImagesDirectory}">
			<fileset dir="${documentationImagesDirectory}" />
		</copy>
	</target>

	<target name="runServer">
		<taskdef name="server" classname="com.agi.ServerTask">
			<classpath>
				<fileset dir="${webProxyDirectory}" includes="**/*.jar" />
			</classpath>
		</taskdef>

		<server proxyContextPath="/proxy" allowedHostList="server.arcgisonline.com,tile.openstreetmap.org,otile1.mqcdn.com,oatile1.mqcdn.com,tile.stamen.com,dev.virtualearth.net" port="8080" baseDir="${basedir}" />
	</target>
</project>
